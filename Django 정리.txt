Django Process

** Django는 MVT 패턴
Model(데이터 처리 담당)
View(로직 담당)
Template(화면 담당)

=> 클라이언트에게서 request가 오면
=> Model에서 정의된 데이터 처리 방식에 따라 데이터 입력
=> View에서 설정한 로직에 따라 해당 url에 맞는 function을 사용
=> 그에 해당하는 html을 이용하여 Template에서 화면 설정 방식을 View 전달
=> View는 그 결과값을 response로 클라이언트에게 제공

** Django 사용

1. Project Setup

(1) 프로젝트, 어플리케이션 생성
- 콘솔에서 django-admin startproject "이름" < "이름" 프로젝트 생성
- 프로젝트를 생성하면 그 안에 프로젝트와 같은 이름으로 프로젝트 전반의 setting, urls 등이 들어 있는 하위 폴더(이하 프로젝트 관리 폴더)와 manage.py 파일 생성
- 프로젝트 폴더에 있는 manage.py 파일을 이용
  => 콘솔에서 해당경로로 python manage.py startapp "이름" < "이름" 어플리케이션 생성

(2) 프로젝트 설정
- 프로젝트 관리 폴더 속 settings.py에서 전반적인 프로젝트 설정 처리
  => DEBUG = True > 개발모드, 바로 아래줄 ALLOWED_HOSTS = [ ]를 비워도 무방, 이때 디폴트 값은 ['Localhost', '127.0.0.1'] 
      DEBUG = False > 운영모드, 바로 아래줄 ALLOWED_HOSTS = [ ]에 실제 운영되는 서버의 IP 주소 혹은 Domain Name이 들어와야 함

- 어플리케이션을 프로젝트에서 인식하기 위해
  어플리케이션 폴더 속 apps.py 파일에서 어플리케이션을 구성해줘야 함
      => from django.apps import AppConfig를 활용
      => settings.py에서 읽어들일 클래스 생성, 이때 클래스의 인자에는 AppConfig가 들어감.
      => ex) class PollsConfig(AppConfig):
    		name = 'polls'		#어플리케이션의 이름 설정
      => 클래스를 생성했으면 다시 프로젝트 관리 폴더의 settings.py로 돌아가서 INSTALLED_APPS 리스트에 위의 클래스를 삽입
      => ex) "경로.PollsConfig"
      => 이 작업이 끝나면 프로젝트는 어플리케이션을 인식

(3) 데이터 베이스 생성 및 관리자 ID, PW 설정
- Django의 특징 중 하나로 관리자 모드(화면)를 기본으로 제공하고, 이 모드를 사용하기 위해
  관리자에 대한 ID, PW가 있어야 함. 이 ID, PW는 어딘가(Database)에는 저장되어 있어야 함.
  따라서, Django는 기본적으로 데이터 베이스가 설정된 상태로 사용해야 함
  => 기본 테이블(기본 데이터 베이스) 생성
       콘솔에서 프로젝트 경로로 python manage.py migrate 입력 < 데이터 베이스 생성 커맨드
  => Django 디폴트 데이터 베이스 엔진은 "sqlite3",
       "NAME" 키에서 데이터 베이스 경로 설정 및 이름 지정 os.path.join(BASE_DIR, "데이터 베이스 이름")
  => 데이터 베이스를 만들었으면 서버 기동하여 프로젝트를 deploy
       콘솔에서 프로젝트 경로로 python manage.py runserver 입력 < 서버실행 커맨드 (서버 종료는 ctrl + c)
  => 관리자 ID 및 PW 생성
       콘솔에서 프로젝트 경로로 python manage.py createsuperuser 입력 < 관리자 생성 커맨드

2. 어플리케이션 구현

(1) Model 생성
- 프로그램에서 사용할 데이터 형식을 잘 고려.
  => 몇 개의 클래스가 필요하고, 각각의 클래스는 몇 개의 변수가 들어가는지
  => 어떤 클래스의 변수가 Primary Key로 잡히고 이에 딸린 Foreign Key는 어떤 것인지

- 어플리케이션 폴더의 models.py 파일에서 클래스 생성
  => from django.db import models 장착
  => 클래스를 생성하고 이때 인자 속에 models.Model을 입력 < 데이터 베이스에 해당 클래스가 나중에 입력될 수 있도록
       각 변수의 형식에 맞춰 문자열일 경우 models.CharField, 
       숫자일 경우 models.IntegerField, date 타입일 경우 models.DateTimeField 메서드를 통해 변수 설정
       (이때, 문자열은 max_length로 최대 길이 설정, 숫자열은 default로 디폴트 값을 설정할 수 있음)
  => 클래스 안에서 __str__(self) 메서드를 통해 객체를 문자열로 변환해서 연산에 쓸 수 있도록 설정
  => 특정 클래스에서 Primary Key에 잡히는 Foreign Key가 있다면
       model.ForeignKey 메서드로 Foreign Key 설정
       (첫번째 인자는 Primary Key가 있는 클래스) 
	>> 추가 인자로 on_delete=models.CASCADE를 주면 primary key가 지워질 경우, 여기에 딸린 Foreign Key도 지워짐
       (기본 Table의 ID column은 디폴트로 설정, id가 primary key로 지정)
  => 데이터 베이스에 Model을 입력하기에 앞서 먼저, 어플리케이션 폴더 속 admin.py에서 클래스를 등록
  => from django.contrib import admin
       from 어플리케이션.models(경로) import "클래스 이름"
  => admin.site.register("클래스 이름") < 클래스 이름 등록

- Model을 데이터베이스에 migrate
  => models.py에서 작성한 클래스는 바로 데이터베이스에 migrate되지 않기 때문에
  => 콘솔에서 프로젝트 경로로 
       >> python manage.py makemigrations 입력
       >> python manage.py migrate로 Model 입력

(2) URL 구성
- 클라이언트가 특정 URL(http://localhost8000/"어플리케이션 이름")을 이용해서 
  서버프로그램을 호출하면 URLConf처리를 통해서 호출할 View를 결정.
  URLConf라는게 특정 파일에 저장되어 있는 내용인데 하나의 프로젝트는 여러개의 어플리케이션으로 구성
  따라서, 모든 경로를 프로젝트 urls.py에 넣는 것은 비효율적.
  => 각 어플리케이션마다 각각의 경로를 넣어준다.

- 기본적으로는 프로젝트 관리 폴더의 urls.py 파일
  그 중 urlpatterns = [ ]에 호출할 View에 해당하는 url 경로를 설정
  ex) path("url 경로", views."views.py에서 작성할 로직", name="이름"),

- 그러나 관리 편의를 위해 각 어플리케이션마다 각각의 경로 삽입
  그렇게 하기 위해 from django.urls import path 에서 추가적으로 include를 장착
  from django.urls import path, include
  따라서, 프로젝트 관리 폴더 urls.py의 urlpatterns =[ ]에는
  path안에 include 메서드를 사용해서 어플리케이션 urls 파일을 지정해 준다.
  ex) path("url 경로", include("어플리케이션.urls"))
  
  => 어플리케이션 폴더의 urls.py 파일로 들어와서 경로 설정
       urlpatterns = [ ] 안에 path 메서드를 이용해서 경로 설정
       ex) path("url 경로", views."로직(함수) 이름", name="이름")
       
  => 만약 경로를 int값으로 얻고자 한다면 "<int>/"를 입력해주면 되고,
       int값이면서 views."로직(함수) 이름"의 인자에 따라 얻고자 한다면,
       "<int: 인자>/"를 입력
       ex) path("<int: 인자>/", views."로직(함수) 이름", name="이름")

(3) View 생성
- View에서는 로직을 처리(함수로)
- 각 함수는 클라이언트의 request를 인자로 받음
- 객체를 이용하기 위해서 필요한 클래스들을 models.py 파일로부터 import
  ex) from "어플리케이션".models import "클래스 이름"

- 클래스의 모든 객체를 리스트로 받고 싶다면
  "클래스 이름".objects.all()
  추가적으로 객체의 순서를 지정하고자 한다면
  "클래스 이름".objects.all().order_by("기준")

- 객체를 Template할 때 쉽게 사용하기 위해
  딕셔너리로 {키 값 : 객체} 생성
  로직을 return할 때는 디폴트로 장착된 render를 사용
  ex) render( request, "Template로 쓸 html 파일명", 딕셔너리 )

- 추가적으로 Foreign Key인 객체를 Primary Key값을 이용해 구하려면
  디폴트로 장착된 from django.shortcuts import render에
  추가 get_object_or_404를 장착 후 사용
  ex) get_object_or_404("Primary Key가 있는 클래스", pk="Primary Key 이름")

(4) Template 생성
- Template은 화면을 담당
- html을 작성하듯 작성, 그러나 Template tag를 이용해야 한다.
- Template tag로는 제어문일 때, {% %} 사용 (제어문의 경우, 제어문을 끝내기 위해 제어문 마지막에 {% end+for/if/... %} 태그가 와야 함
		 값일 때는 {{ }} 사용
- Django를 이용할 때 보안상의 이유로 {% csrf_token %} 을 삽입
- Template에서는 View에서 return 값으로 render한 딕셔너리 키 값을 사용
- 키 값.구체적 객체명(Model에서 선언한 클래스 안 객체) 형태로 값을 사용
- for 문을 Template에서 돌릴 때 forloop 자체 index를 사용하고 싶으면 forloop.counter

* <input type="radio'>
- Template에서 여러 개의 radio type의 사용자 입력 정보를 사용하고 싶으면
  그룹을 지어줘야 함. 그룹을 짓기 위해서는 속성으로 name이 같아야 함.
- input의 글귀가 되는 부분은 label tag를 이용해서 만들어주고 
  input tag의 id 속성과 label tag의 for 속성 값이 동일해야 함. 
- 사용자 입력 정보에 입력되는 데이터를 DB에 입력하기 위해
  form tag 안에 모든 해당 input tag를 집어넣는다.
- 이 때, 입력값을 보내기 위한 input tag로 type="submit"인 사용자 입력 정보를 생성
- form의 속성은 action과 method로, method 속성의 경우 "post"로 설정해준다.
- 각 input tage는 분류를 위해 value 값을 index 값으로 설정


* 정리 : 	Django는 MVT가 유기적으로 연결되어 있음.
	보다 원활한 활용을 위해 Model 생성 이후,
	Template을 먼저 작성함으로써 필요한 값들을 생각해보고
	View에서 이 값들을 효율적으로 만들어 내는 것이 필요!!
	MVT 패턴의 매커니즘을 잘 이해하는 것이 필요!!


2020/08/03
** views.vote
- 최종적으로 현재 투표 항목에 대한 각 항목들의 투표현황을 출력

먼저, 투표현황을 보일 url 추가 설정.
=> path('<int:page_num2>/vote/', views.vote, name ='vote')로
    -> polls/"질문에 해당하는 id값"/ 후 vote 페이지로 넘어갈 수 있게 설정

이후, 이전에 작성한 views.detail에서 form tag의 action 설정
=> detail.html에서 누락한 action attr 설정
     <form action="{% url 'polls:vote' question.id %}" method="post">
     -> form tag의 action attr에서 polls는 urls.py에서 설정한 app_name이고,
         : 뒤에 있는게 urls.py파일 urlpatterns에 붙여 놓은 이름
위 action attr의 결과로 http://localhost:8000/polls/{{question.id}}/vote/ 페이지로 이동한다.

views.py에서 vote()에 해당하는 로직 처리
=> action을 통해 Question 객체의 id가 URL로 넘어오기 때문에 인자로 page_num2 설정
=> question = get_object_or_404(Question, pk=page_num2)
    -> question 인자로 받아줌
=> 추가적으로 선택한 값들은 키 : 값의 형태로 헤더에 숨어 들어옴.
=> 따라서, radio 입력에서 선택한 값이 name attr : 값이 들어오므로 이를 추출
=> selected_choice = question.choice_set.get(pk=request.POST['choice'])
     -> POST 형식으로 들어온 데이터의 name='choice'라는 값을 뽑아서 변수 저장
=> selected_choice.votes += 1 	< 투표한 값을 1 올리고
     selected_choice.save()		< 이것을 저장
=> 최종적으로, 현재 투표 항목에 대한 각 항목들의 투표현황을 출력하기 위해
     PK에 묶인 FK 객체를 get
     -> choice = get_object_or_404(Question, pk=page_num2)
     -> context = {'votes_result': choice}

=> vote()에 연결된 Template에서 forloop를 통해 선택지와 투표현황을 출력


